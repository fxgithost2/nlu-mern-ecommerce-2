{"version":3,"sources":["redux/actions/orders.js","pages/dashboard/orders/PageOrderList.jsx"],"names":["handleError","dispatch","e","logTag","console","error","response","data","type","actionTypes","ERROR","payload","getAllOrders","search","status","paymentStatus","page","limit","a","Number","parseInt","START_LOADING","apiOrderMgr","getAll","GET_ALL","END_LOADING","updateOrder","id","updatedOrder","update","UPDATE","PageOrderList","t","useLocales","useDispatch","useSelector","state","orderManager","orderList","list","isLoading","useState","order","setOrder","orderBy","setOrderBy","setPage","rowsPerPage","setRowsPerPage","currentId","setCurrentId","openForm","setOpenForm","selectedOrder","setSelectedOrder","openDetailForm","setOpenDetailForm","setSearch","orderStatus","setOrderStatus","setPaymentStatus","useEffect","tableHeads","disablePadding","label","numeric","handleRequestSort","event","property","handleChangePage","newPage","handleChangeRowsPerPage","target","value","emptyRows","Math","max","length","title","maxWidth","open","setOpen","handleUpdate","orderId","updatedData","log","heading","links","name","href","PATH_DASHBOARD","general","action","variant","startIcon","icon","plusFill","onClick","onSearchChange","onKeyDown","key","onChangeOrderStatus","onChangePaymentStatus","errorDisplay","JSON","parse","sx","minWidth","size","headLabel","numSelected","onRequestSort","rowCount","stableSort","getComparator","slice","map","row","index","style","height","colSpan","count","onPageChange","onRowsPerPageChange","renderContent"],"mappings":"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","file":"static/js/38.7826aeb0.chunk.js","sourcesContent":["import * as actionTypes from '../../constants/actionTypes';\nimport { orderManager as apiOrderMgr } from '../../api';\n\nconst isDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nconst handleError = (dispatch, e, logTag) => {\n  console.error(`[actions]${logTag} error`, e?.response?.data || e);\n  dispatch({ type: actionTypes.ORDER.ERROR, payload: e?.response?.data || e });\n};\n\nexport const getAllOrders = (search, status, paymentStatus, page, limit) => async (dispatch) => {\n  try {\n    page = Number.parseInt(page, 10) || 1;\n    limit = Number.parseInt(limit, 10) || 10;\n\n    dispatch({ type: actionTypes.ORDER.START_LOADING });\n\n    const { data } = await apiOrderMgr.getAll(search, status, paymentStatus, page, limit);\n    if (isDev) console.log('[actions][orders][getAll] result', data);\n\n    dispatch({ type: actionTypes.ORDER.GET_ALL, payload: data });\n    dispatch({ type: actionTypes.ORDER.END_LOADING });\n  } catch (e) {\n    handleError(dispatch, e, '[orders][getAll]');\n  }\n};\n\nexport const createOrder = (newOrder) => async (dispatch) => {\n  try {\n    dispatch({ type: actionTypes.ORDER.START_LOADING });\n\n    if (isDev) console.log('[actions][orders][create] dataInput', newOrder);\n    const { data } = await apiOrderMgr.create(newOrder);\n    if (isDev) console.log('[actions][orders][create] result', data);\n\n    dispatch({ type: actionTypes.ORDER.CREATE, payload: data });\n    dispatch({ type: actionTypes.ORDER.END_LOADING });\n  } catch (e) {\n    handleError(dispatch, e, '[orders][create]');\n  }\n};\n\nexport const updateOrder = (id, updatedOrder) => async (dispatch) => {\n  try {\n    dispatch({ type: actionTypes.ORDER.START_LOADING });\n\n    if (isDev) console.log('[actions][orders][update] dataInput', updatedOrder);\n    const { data } = await apiOrderMgr.update(id, updatedOrder);\n    if (isDev) console.log('[actions][orders][update] result', data);\n\n    dispatch({ type: actionTypes.ORDER.UPDATE, payload: data.data });\n    dispatch({ type: actionTypes.ORDER.END_LOADING });\n  } catch (e) {\n    handleError(dispatch, e, '[orders][update]');\n  }\n};\n\nexport const cancelOrder = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: actionTypes.ORDER.START_LOADING });\n\n    if (isDev) console.error('[actions][orders][cancel] dataInput', id);\n    await apiOrderMgr.deleteCategory(id);\n\n    dispatch({ type: actionTypes.ORDER.UPDATE, payload: { _id: id } });\n    dispatch({ type: actionTypes.ORDER.END_LOADING });\n  } catch (e) {\n    handleError(dispatch, e, '[orders][cancel]');\n  }\n};\n","import { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport plusFill from '@iconify/icons-eva/plus-fill';\n// material\nimport { Card, Table, Button, TableRow, TableBody, TableCell, Container, TableContainer } from '@material-ui/core';\n// redux\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllOrders, updateOrder } from '../../../redux/actions/orders';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\nimport { useLocales } from '../../../hooks';\n// components\nimport Page from '../../../components/Page';\nimport Scrollbar from '../../../components/Scrollbar';\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs';\nimport LoadingScreen from '../../../components/LoadingScreen';\nimport EmptyCard from '../../../components/EmptyCard';\nimport { OrderDetailForm, OrderListHead, OrderListToolbar, OrderTableRow } from '../../../components/dashboard/order';\nimport CategoryForm from '../categories/CategoryForm';\nimport { MTablePagination } from '../../../components/@material-extend';\n//\nimport { stableSort, getComparator } from '../../../helper/listHelper';\n\n// ----------------------------------------------------------------------\n\nexport default function PageOrderList() {\n  const { t } = useLocales();\n  const dispatch = useDispatch();\n  const { list: orderList, isLoading, error } = useSelector((state) => state.orderManager);\n\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('order');\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [currentId, setCurrentId] = useState(null);\n  const [openForm, setOpenForm] = useState(false);\n\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [openDetailForm, setOpenDetailForm] = useState(false);\n\n  const [search, setSearch] = useState('');\n  const [orderStatus, setOrderStatus] = useState('');\n  const [paymentStatus, setPaymentStatus] = useState('');\n\n  useEffect(() => {\n    dispatch(getAllOrders(search, orderStatus, paymentStatus, 1, 100000));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, orderStatus, paymentStatus]);\n\n  const tableHeads = [\n    {\n      id: 'numericId',\n      disablePadding: false,\n      label: 'Mã'\n    },\n    {\n      id: 'name',\n      numeric: false,\n      disablePadding: true,\n      label: 'Khách hàng'\n    },\n    {\n      id: 'phone',\n      numeric: false,\n      disablePadding: true,\n      label: 'Số điện thoại'\n    },\n    {\n      id: 'status',\n      numeric: false,\n      disablePadding: true,\n      label: t('order.order-status')\n    },\n    {\n      id: 'paymentStatus',\n      numeric: false,\n      disablePadding: true,\n      label: t('order.payment-status')\n    },\n    {\n      id: 'paymentMethod',\n      numeric: false,\n      disablePadding: true,\n      label: t('order.payment-method')\n    },\n    {\n      id: 'total',\n      numeric: true,\n      disablePadding: false,\n      label: t('cart.order.total')\n    },\n    {\n      id: 'createdAt',\n      numeric: true,\n      disablePadding: true,\n      label: t('dashboard.created-at')\n    },\n    {\n      id: 'action',\n      numeric: false,\n      disablePadding: false\n    }\n  ];\n\n  const handleKeyPressToSearch = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(getAllOrders(search, orderStatus, paymentStatus, 1, 100000));\n    }\n  };\n\n  const handleSearchFilter = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const handleChangeStatusFilter = (event, value) => {\n    if (value) {\n      setOrderStatus(value.value);\n    }\n  };\n\n  const handleChangePaymentStatusFilter = (event, value) => {\n    if (value) {\n      setPaymentStatus(value.value);\n    }\n  };\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleCreateNew = () => {\n    // setCurrentId(null);\n    // setOpenForm(true);\n  };\n\n  const handleUpdateOrder = (orderId, updatedData) => {\n    dispatch(updateOrder(orderId, updatedData));\n    console.log('handleUpdateOrder', { orderId, updatedData });\n  };\n\n  // Avoid a layout jump when reaching the last page with empty categoriesList.\n  const emptyRows = Math.max(0, (1 + page) * rowsPerPage - orderList.length);\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingScreen />;\n    }\n    if (error) {\n      let errorDisplay = '';\n      try {\n        errorDisplay = JSON.parse(error);\n        // eslint-disable-next-line no-empty\n      } catch {}\n      return <p>{errorDisplay}</p>;\n    }\n    if (!orderList || orderList.length === 0) {\n      return <EmptyCard title={t('dashboard.categories.title-not-found')} />;\n    }\n    return (\n      <>\n        <Scrollbar>\n          <TableContainer sx={{ minWidth: 800 }}>\n            <Table size=\"small\">\n              <OrderListHead\n                order={order}\n                orderBy={orderBy}\n                headLabel={tableHeads}\n                numSelected={0}\n                onRequestSort={handleRequestSort}\n                rowCount={orderList.length}\n              />\n              <TableBody>\n                {stableSort(orderList, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => (\n                    <OrderTableRow\n                      key={index}\n                      row={row}\n                      onClick={() => {\n                        setSelectedOrder(row);\n                        setOpenDetailForm(true);\n                      }}\n                    />\n                  ))}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: 33 * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Scrollbar>\n\n        <MTablePagination\n          count={orderList.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </>\n    );\n  };\n\n  return (\n    <Page title={t('order.dashboard-page-title')}>\n      <Container maxWidth={false}>\n        <CategoryForm open={openForm} setOpen={setOpenForm} currentId={currentId} setCurrentId={setCurrentId} />\n\n        <OrderDetailForm\n          order={selectedOrder}\n          open={openDetailForm}\n          setOpen={setOpenDetailForm}\n          handleUpdate={handleUpdateOrder}\n        />\n\n        <HeaderBreadcrumbs\n          heading={t('order.heading')}\n          links={[{ name: t('dashboard.general'), href: PATH_DASHBOARD.general }, { name: t('order.title') }]}\n          action={\n            <Button variant=\"contained\" startIcon={<Icon icon={plusFill} />} onClick={handleCreateNew}>\n              {t('dashboard.orders.add')}\n            </Button>\n          }\n        />\n\n        <Card>\n          <OrderListToolbar\n            search={search}\n            onSearchChange={handleSearchFilter}\n            onKeyDown={handleKeyPressToSearch}\n            orderStatus={orderStatus}\n            onChangeOrderStatus={handleChangeStatusFilter}\n            paymentStatus={paymentStatus}\n            onChangePaymentStatus={handleChangePaymentStatusFilter}\n          />\n          {renderContent()}\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}