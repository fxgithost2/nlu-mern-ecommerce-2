{"version":3,"sources":["components/authentication/reset-password/NewPasswordForm.jsx","components/authentication/reset-password/OtpInputForm.jsx","components/authentication/reset-password/ResetPasswordForm.jsx","pages/authentication/ResetPassword.jsx"],"names":["NewPasswordForm","onChangePassword","isLoading","t","useLocales","ChangePasswordSchema","Yup","shape","newPassword","min","max","required","confirmNewPassword","oneOf","formik","useFormik","initialValues","validationSchema","onSubmit","values","a","typeUtils","errors","touched","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","TextField","fullWidth","type","label","error","Boolean","helperText","LoadingButton","size","variant","loading","toUpperCase","maxLength","object","target","length","slice","OtpInputForm","onVerifyOtp","onResentOtp","VerifyCodeSchema","code1","code2","code3","code4","code5","code6","otpCode","Object","join","isValid","useEffect","firstCodeInput","document","querySelector","focus","handleOnChange","e","code","name","replace","setFieldValue","order","index","indexOf","nextInput","select","handleKeyDown","event","keyCode","stopPropagation","prevInput","direction","justifyContent","sx","minHeight","keys","map","item","OutlinedInput","placeholder","onInput","onChange","inputProps","p","textAlign","width","xs","sm","height","onFocus","onKeyDown","Box","display","FormHelperText","style","marginTop","verifyResult","Button","onClick","_event","color","m","disabled","ResetPasswordForm","onSendOtp","isSending","ResetPasswordSchema","emailOrPhone","test","createError","regexCons","phone","message","email","component","RouterLink","to","PATH_AUTH","login","mt","RootStyle","styled","Page","alignItems","padding","theme","ResetPassword","currentLang","navigate","useNavigate","dispatch","useDispatch","useSelector","state","auth","otp","account","isHandlingOtp","isVerifying","isSent","isVerified","isChangingPass","isChangeSuccess","otpError","useState","errorMgs","setErrorMgs","window","recaptchaVerifier","firebase","RecaptchaVerifier","defaultCountry","callback","response","console","log","handleSendOtp","sentOtpViaEmail","sentOtpViaPhone","handleResentOtp","resendOtpAction","handleVerifyOtp","checkOtpEmail","checkOtpPhone","handleChangePassword","resetPasswordAction","handleGotoLogin","clearOtpState","title","LogoOnlyLayout","Container","maxWidth","mx","mb","Typography","gutterBottom","paragraph","Alert","severity"],"mappings":"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","file":"static/js/40.5c77bd65.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n// form validation\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport * as Yup from 'yup';\n// material\nimport { Stack, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport { useLocales } from '../../../hooks';\n//\nimport * as typeUtils from '../../../utils/typeUtils';\n\n// ----------------------------------------------------------------------\n\nNewPasswordForm.propTypes = {\n  onChangePassword: PropTypes.func,\n  isLoading: PropTypes.bool,\n  errorMgs: PropTypes.string\n};\n\nexport default function NewPasswordForm({ onChangePassword, isLoading }) {\n  const { t } = useLocales();\n\n  const ChangePasswordSchema = Yup.object().shape({\n    newPassword: Yup.string()\n      .min(6, t('auth.new-password-min'))\n      .max(32, t('auth.new-password-max'))\n      .required(t('auth.new-password-required')),\n    confirmNewPassword: Yup.string()\n      .required(t('auth.confirm-password-required'))\n      .oneOf([Yup.ref('newPassword'), null], t('auth.confirm-password-not-match'))\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      newPassword: '',\n      confirmNewPassword: ''\n    },\n    validationSchema: ChangePasswordSchema,\n    onSubmit: async (values) => {\n      if (typeUtils.isFunction(onChangePassword)) {\n        const { newPassword } = values;\n        onChangePassword(newPassword);\n      }\n    }\n  });\n\n  const { errors, touched, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            {...getFieldProps('newPassword')}\n            fullWidth\n            autoComplete=\"on\"\n            type=\"password\"\n            label={t('auth.new-password')}\n            error={Boolean(touched.newPassword && errors.newPassword)}\n            helperText={touched.newPassword && errors.newPassword}\n          />\n\n          <TextField\n            {...getFieldProps('confirmNewPassword')}\n            fullWidth\n            autoComplete=\"on\"\n            type=\"password\"\n            label={t('auth.confirm-new-password')}\n            error={Boolean(touched.confirmNewPassword && errors.confirmNewPassword)}\n            helperText={touched.confirmNewPassword && errors.confirmNewPassword}\n          />\n\n          <LoadingButton size=\"large\" type=\"submit\" variant=\"contained\" loading={isLoading}>\n            {t('common.save-change').toUpperCase()}\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n// form validation\nimport * as Yup from 'yup';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { Button, Box, OutlinedInput, FormHelperText, Stack } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport { useLocales } from '../../../hooks';\nimport * as typeUtils from '../../../utils/typeUtils';\n\n// ----------------------------------------------------------------------\n\n// eslint-disable-next-line consistent-return\nfunction maxLength(object) {\n  if (object.target.value.length > object.target.maxLength) {\n    return (object.target.value = object.target.value.slice(object.target.maxLength - 1, object.target.maxLength));\n  }\n}\n\nOtpInputForm.propTypes = {\n  onVerifyOtp: PropTypes.func.isRequired,\n  onResentOtp: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool\n};\n\n// ----------------------------------------------------------------------\n\nexport default function OtpInputForm({ onVerifyOtp, onResentOtp, isLoading }) {\n  const { t } = useLocales();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.number().required('Code is required'),\n    code2: Yup.number().required('Code is required'),\n    code3: Yup.number().required('Code is required'),\n    code4: Yup.number().required('Code is required'),\n    code5: Yup.number().required('Code is required'),\n    code6: Yup.number().required('Code is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      code1: '',\n      code2: '',\n      code3: '',\n      code4: '',\n      code5: '',\n      code6: ''\n    },\n    validationSchema: VerifyCodeSchema,\n    onSubmit: async (values) => {\n      if (typeUtils.isFunction(onVerifyOtp)) {\n        const otpCode = Object.values(values).join('');\n        onVerifyOtp(otpCode);\n      }\n    }\n  });\n\n  const { values, errors, isValid, touched, handleSubmit, getFieldProps } = formik;\n\n  useEffect(() => {\n    const firstCodeInput = document.querySelector(`input[name=\"verify-code-input-code1\"]`);\n    if (firstCodeInput) {\n      firstCodeInput.focus();\n    }\n  }, []);\n\n  const handleOnChange = (e) => {\n    const code = e.target.name.replace('verify-code-input-', '');\n    formik.setFieldValue(code, e.target.value);\n\n    const order = ['code1', 'code2', 'code3', 'code4', 'code5', 'code6'];\n    const index = order.indexOf(code);\n    if (index < 5) {\n      const nextInput = document.querySelector(`input[name=\"verify-code-input-${order[index + 1]}\"]`);\n      if (nextInput) {\n        nextInput.focus();\n        nextInput.select();\n      }\n    }\n  };\n\n  const handleResent = (_event) => {\n    if (typeUtils.isFunction(onResentOtp)) {\n      onResentOtp();\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.keyCode === 8 && !event.target.value) {\n      event.stopPropagation();\n      // Backspace press\n      const order = ['code1', 'code2', 'code3', 'code4', 'code5', 'code6'];\n      const code = event.target.name.replace('verify-code-input-', '');\n\n      const index = order.indexOf(code);\n      if (index > 0) {\n        const prevInput = document.querySelector(`input[name=\"verify-code-input-${order[index - 1]}\"]`);\n        if (prevInput) {\n          prevInput.focus();\n        }\n      }\n    }\n  };\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack direction=\"column\" spacing={3} justifyContent=\"center\" sx={{ minHeight: '200px' }}>\n          <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n            {Object.keys(values).map((item) => (\n              <OutlinedInput\n                key={item}\n                {...getFieldProps(item)}\n                type=\"number\"\n                placeholder=\"-\"\n                onInput={maxLength}\n                error={Boolean(touched[item] && errors[item])}\n                onChange={handleOnChange}\n                inputProps={{\n                  maxLength: 1,\n                  sx: {\n                    p: 0,\n                    textAlign: 'center',\n                    width: { xs: 36, sm: 56 },\n                    height: { xs: 36, sm: 56 }\n                  }\n                }}\n                onFocus={(e) => e.target.select}\n                onKeyDown={handleKeyDown}\n                name={`verify-code-input-${item}`}\n              />\n            ))}\n          </Stack>\n\n          <Box display=\"flex\" justifyContent=\"flex-end\">\n            <FormHelperText error={!isValid} style={{ textAlign: 'right', marginTop: 0 }}>\n              {errors?.verifyResult || (!isValid && 'Vui lòng nhập mã OTP gồm 6 chữ số')}\n            </FormHelperText>\n          </Box>\n\n          <Box display=\"flex\" justifyContent=\"center\">\n            <Button fullWidth onClick={handleResent} color=\"inherit\" sx={{ m: 1 }} disabled={isLoading}>\n              Gửi lại\n            </Button>\n            <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isLoading} sx={{ m: 1 }}>\n              Xác nhận\n            </LoadingButton>\n          </Box>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import PropTypes from 'prop-types';\n// form validation\nimport * as Yup from 'yup';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { Box, Button, TextField, Alert, Stack } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { PATH_AUTH } from '../../../routes/paths';\n// hooks\nimport { useLocales } from '../../../hooks';\n\nimport { regexCons } from '../../../constants';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSendOtp: PropTypes.func,\n  isSending: PropTypes.bool,\n  errorMgs: PropTypes.string\n};\n\nexport default function ResetPasswordForm({ onSendOtp, isSending }) {\n  const { t } = useLocales();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    emailOrPhone: Yup.string()\n      .required(t('auth.email-or-phone-required'))\n      .test('test-name', (value, { createError }) => {\n        // phone\n        if (/^\\d.+$/.test(value)) {\n          if (regexCons.phone.test(value)) {\n            return true;\n          }\n          return createError({ message: t('address.phone-invalid') });\n        }\n        // email\n        if (regexCons.email.test(value)) {\n          return true;\n        }\n        return createError({ message: t('auth.email-invalid') });\n      })\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      emailOrPhone: ''\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values) => {\n      const { emailOrPhone } = values;\n      onSendOtp(emailOrPhone);\n    }\n  });\n\n  const { errors, touched, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            {...getFieldProps('emailOrPhone')}\n            type=\"text\"\n            label={t('auth.email-or-phone')}\n            error={Boolean(touched.emailOrPhone && errors.emailOrPhone)}\n            helperText={touched.emailOrPhone && errors.emailOrPhone}\n          />\n\n          <Box display=\"flex\" justifyContent=\"center\">\n            <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n              {t('common.back').toUpperCase()}\n            </Button>\n            <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSending}>\n              {t('auth.send-otp').toUpperCase()}\n            </LoadingButton>\n          </Box>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useEffect, useState } from 'react';\n// material\nimport { Alert, Box, Button, Container, Typography } from '@material-ui/core';\nimport { experimentalStyled as styled } from '@material-ui/core/styles';\n// redux\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  checkOtpEmail,\n  checkOtpPhone,\n  resetPassword as resetPasswordAction,\n  resendOtp as resendOtpAction,\n  sentOtpViaEmail,\n  sentOtpViaPhone,\n  clearOtpState\n} from '../../redux/slices/authSlice';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// components\nimport { NewPasswordForm, OtpInputForm, ResetPasswordForm } from '../../components/authentication/reset-password';\nimport Page from '../../components/Page';\nimport { PATH_AUTH } from '../../routes/paths';\n//\nimport { CheckIcon, SentIcon } from '../../assets';\nimport { regexCons } from '../../constants';\nimport { useLocales } from '../../hooks';\n// firebase\nimport firebase from '../../firebase';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const { t, currentLang } = useLocales();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const {\n    emailOrPhone: account,\n    isLoading: isHandlingOtp,\n    isVerifying,\n    isSent,\n    isVerified,\n    isChangingPass,\n    isChangeSuccess,\n    error: otpError\n  } = useSelector((state) => state.auth.otp);\n\n  const [errorMgs, setErrorMgs] = useState('');\n\n  useEffect(() => {\n    if (!otpError) {\n      setErrorMgs(null);\n    } else {\n      setErrorMgs(otpError?.message?.[currentLang.value] || 'Lỗi');\n    }\n  }, [currentLang.value, otpError]);\n\n  useEffect(() => {\n    // eslint-disable-next-line import/no-named-as-default-member\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('invisible-recaptcha', {\n      size: 'invisible',\n      defaultCountry: 'VN',\n      callback: (response) => {\n        console.log('response', response);\n      }\n    });\n  }, []);\n\n  const handleSendOtp = (emailOrPhone) => {\n    if (regexCons.email.test(emailOrPhone)) {\n      dispatch(sentOtpViaEmail(emailOrPhone));\n    } else {\n      dispatch(sentOtpViaPhone(emailOrPhone));\n    }\n  };\n\n  const handleResentOtp = () => {\n    dispatch(resendOtpAction());\n  };\n\n  const handleVerifyOtp = (otpCode) => {\n    if (regexCons.email.test(account)) {\n      dispatch(checkOtpEmail(account, otpCode));\n    } else {\n      dispatch(checkOtpPhone(account, otpCode));\n    }\n  };\n\n  const handleChangePassword = (newPassword) => {\n    dispatch(resetPasswordAction(newPassword));\n  };\n\n  const handleGotoLogin = (_event) => {\n    dispatch(clearOtpState());\n    navigate(PATH_AUTH.login);\n  };\n\n  const renderBody = () => {\n    if (isChangeSuccess) {\n      return (\n        <Box sx={{ textAlign: 'center' }}>\n          <CheckIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n          <Typography variant=\"h3\" gutterBottom sx={{ mb: 3 }}>\n            {t('auth.set-new-password-success')}\n          </Typography>\n\n          <Button fullWidth size=\"large\" onClick={handleGotoLogin} variant=\"contained\">\n            {t('auth.login').toUpperCase()}\n          </Button>\n        </Box>\n      );\n    }\n    if (!isSent) {\n      return (\n        <>\n          <Typography variant=\"h3\" paragraph>\n            {t('auth.reset-password')}\n          </Typography>\n          <Typography sx={{ color: 'text.secondary', mb: 5 }}>{t('auth.reset-password-desc')}</Typography>\n\n          <ResetPasswordForm onSendOtp={handleSendOtp} isSending={isHandlingOtp} />\n        </>\n      );\n    }\n    if (!isVerified) {\n      return (\n        <Box sx={{ textAlign: 'center' }}>\n          <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n          <Typography variant=\"h3\" gutterBottom>\n            {t('auth.send-otp-success')}\n          </Typography>\n          <Typography>{t('auth.send-otp-desc')}</Typography>\n\n          <OtpInputForm onResentOtp={handleResentOtp} onVerifyOtp={handleVerifyOtp} isLoading={isVerifying} />\n        </Box>\n      );\n    }\n    return (\n      <Box sx={{ textAlign: 'center' }}>\n        <Typography variant=\"h3\" gutterBottom sx={{ mb: 3 }}>\n          {t('auth.set-new-password')}\n        </Typography>\n\n        <NewPasswordForm onChangePassword={handleChangePassword} isLoading={isChangingPass} />\n      </Box>\n    );\n  };\n\n  return (\n    <RootStyle title={t('auth.page-title.reset-password')}>\n      <LogoOnlyLayout />\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          {renderBody()}\n          {errorMgs && (\n            <Alert severity=\"error\" sx={{ mt: 3 }}>\n              {errorMgs}\n            </Alert>\n          )}\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}